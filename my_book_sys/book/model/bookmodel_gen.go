// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bookFieldNames          = builder.RawFieldNames(&Book{})
	bookRows                = strings.Join(bookFieldNames, ",")
	bookRowsExpectAutoSet   = strings.Join(stringx.Remove(bookFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	bookRowsWithPlaceHolder = strings.Join(stringx.Remove(bookFieldNames, "`book_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	bookModel interface {
		Insert(ctx context.Context, data *Book) (sql.Result, error)
		FindOne(ctx context.Context, bookId string) (*Book, error)
		FindOneByName(ctx context.Context, name string) (*Book, error)
		Update(ctx context.Context, data *Book) error
		Delete(ctx context.Context, bookId string) error
	}

	defaultBookModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Book struct {
		BookId string `db:"book_id"` // stu_id
		Name   string `db:"name"`    // name
		Count  int64  `db:"count"`   // password
	}
)

func newBookModel(conn sqlx.SqlConn) *defaultBookModel {
	return &defaultBookModel{
		conn:  conn,
		table: "`book`",
	}
}

func (m *defaultBookModel) Delete(ctx context.Context, bookId string) error {
	query := fmt.Sprintf("delete from %s where `book_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, bookId)
	return err
}

func (m *defaultBookModel) FindOne(ctx context.Context, bookId string) (*Book, error) {
	query := fmt.Sprintf("select %s from %s where `book_id` = ? limit 1", bookRows, m.table)
	var resp Book
	err := m.conn.QueryRowCtx(ctx, &resp, query, bookId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBookModel) FindOneByName(ctx context.Context, name string) (*Book, error){
	query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", bookRows, m.table)
	var resp Book
	err := m.conn.QueryRowCtx(ctx, &resp, query, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBookModel) Insert(ctx context.Context, data *Book) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, bookRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.BookId, data.Name, data.Count)
	return ret, err
}

func (m *defaultBookModel) Update(ctx context.Context, data *Book) error {
	query := fmt.Sprintf("update %s set %s where `book_id` = ?", m.table, bookRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Count, data.BookId)
	return err
}

func (m *defaultBookModel) tableName() string {
	return m.table
}
